q!
flash
flash.store_flash(res)
req
res
res.headers
flash['first_key']
cookie['_rails_lite_app_flash']
cookie_val
JSON.parse(cookie_val)
Rack::Utils.parse_query(cookie_str)
cookie_hash
cookie_str
cookie_key
cookie
cookie_val
cookie_hash
c
q!
exit
q!
exit
req.cookies
req
n
req.cookies
n
c
q!
n
req.cookies
@cookie_hash
c
q!
JSON.parse(req.cookies["_rails_lite_app_flash"]).length
JSON.parse(req.cookies["_rails_lite_app_flash"])
req.cookies["_rails_lite_app_flash"].to_json
req.cookies["_rails_lite_app_flash"]
req.cookies["_rails_lite_app_flash"].length
@cookie_hash
req.cookies["_rails_lite_app_flash"].length
req.cookies["_rails_lite_app_flash"].count
req.cookies.count
req.cookies
c
req.cookies
req
c
req.cookies
req
q!
req.cookies["_rails_lite_app_flash"]
@cookie_hash
s
q!
req.cookies
c
q!
n
s
req
res.cookies
res
@cookie_hash
s
n
c
q!
n
message
@cookie_hash
n
@cookie_hash
c
n
@cookie_hash
n
@cookie_hash
n
@cookie_hash
c
q!
c
@cookie_hash
c
q!
exit
req.cookies["_rails_lite_app_flash"].length
req.cookies["_rails_lite_app_flash"]
c
q!
exit
req.cookies
c
req.cookies
c
req.cookies
q!
@cookie_hash
JSON.parse(res.header["Set-Cookie"])
res.header["Set-Cookie"].to_h
res.header["Set-Cookie"].to_hash
res.header["Set-Cookie"].to_json
res.header["Set-Cookie"]
res.header["Set-Cookie"
res.header
res
res.cookies
q!
req.cookies
c
req.cookies
c
req.cookies["_rails_lite_app_flash"]
req.cookies[_rails_lite_app_flash]
req.cookies
c
req.cookies
c
req.cookies
req
q!
exit
name
q!
n
req
params.merge(req.params)
s
match_data[:id]
n
match_data["id"]
params["id"]
match_data.names
match_data
n
Regexp.new(@pattern).match(req.path)
@pattern
req.path
n
params
n
s
exit
s
q!
http_method
q!
res.methods - Object.methods
res.body
res.writer
req.params
req
res.route
res[params]
res.params
res
req
params
@pattern
pattern
q!
erbtemplate.result(binding)
erbtemplate = ERB.new(File.read(view))
File.read(view)
q!
template_name
ActiveSupport::Inflector.underscore(self.class.to_s)
self.class.to_s
self.class
ActiveSupport::Inflector.deconstantize(self.class)
ActiveSupport::Inflector.underscore(ActiveSupport::Inflector.deconstantize(self.class))
template
q!
self.class
self.send(template_name)
self.send
self
template_name.class
:index
template_name
