// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test adding a child to parent at last position 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
      "D",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": "D",
  },
  "D": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "C",
    "nextSibling": null,
  },
}
`;

exports[`test adding a child to parent at position 0 (first) 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "D",
      "B",
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "D",
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
}
`;

exports[`test adding a child to parent at position 1 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "D",
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "D",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "D",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": "C",
  },
}
`;

exports[`test adding a sibling 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
    ],
    "prevSibling": "A",
    "nextSibling": "D",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "D",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": "C",
  },
}
`;

exports[`test adding an only child to parent 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
}
`;

exports[`test creating a new parent 1 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "key0",
  },
  "key0": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "key0",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
    ],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "B": Immutable.Record {
    "parent": "key0",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "key0",
    "nextSibling": null,
  },
}
`;

exports[`test creating a new parent 2 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "key1",
    ],
    "prevSibling": "A",
    "nextSibling": "D",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "key1",
  },
  "key1": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "key1",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "C",
    ],
    "prevSibling": "B",
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": "key1",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
}
`;

exports[`test creating a updating node to become next sibling's child 1 1`] = `
Immutable.OrderedMap {
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "A",
      "B",
      "C",
    ],
    "prevSibling": null,
    "nextSibling": "D",
  },
  "A": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
}
`;

exports[`test creating a updating node to become next sibling's child 2 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": "D",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
}
`;

exports[`test creating a updating node to become next sibling's child 3 1`] = `
Immutable.OrderedMap {
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "A",
      "Y",
    ],
    "prevSibling": null,
    "nextSibling": null,
  },
  "A": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "Y",
  },
  "Y": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "Y",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "Y",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "Y",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
}
`;

exports[`test creating a updating node to become previous sibling's child 1 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
      "D",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": "D",
  },
  "D": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "C",
    "nextSibling": null,
  },
}
`;

exports[`test creating a updating node to become previous sibling's child 2 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": "D",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
}
`;

exports[`test merging blocks 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
      "D",
      "E",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": "D",
  },
  "D": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "C",
    "nextSibling": "E",
  },
  "E": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "E",
    "text": "epsilon",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "D",
    "nextSibling": null,
  },
}
`;

exports[`test moving child up with no parent - no-op 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
}
`;

exports[`test moving first child up 1 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "A",
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "C",
    ],
    "prevSibling": "B",
    "nextSibling": "D",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
}
`;

exports[`test moving first child up 2 1`] = `
Immutable.OrderedMap {
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "A",
      "B",
      "Y",
    ],
    "prevSibling": null,
    "nextSibling": null,
  },
  "A": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "A",
    "nextSibling": "Y",
  },
  "Y": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "Y",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "C",
    ],
    "prevSibling": "B",
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": "Y",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
}
`;

exports[`test moving last child up 1 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
    ],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": "D",
  },
  "D": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "C",
    "nextSibling": null,
  },
}
`;

exports[`test moving last child up 2 1`] = `
Immutable.OrderedMap {
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "A",
      "Y",
      "C",
    ],
    "prevSibling": null,
    "nextSibling": null,
  },
  "A": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "Y",
  },
  "Y": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "Y",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
    ],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "B": Immutable.Record {
    "parent": "Y",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": null,
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "Y",
    "nextSibling": null,
  },
}
`;

exports[`test moving only child up deletes parent 1 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
}
`;

exports[`test moving only child up deletes parent 2 1`] = `
Immutable.OrderedMap {
  "B": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
}
`;

exports[`test moving only child up deletes parent 3 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "B",
  },
  "B": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "A",
    "nextSibling": null,
  },
}
`;

exports[`test moving only child up deletes parent 4 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "C",
    ],
    "prevSibling": "A",
    "nextSibling": null,
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "C",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
}
`;

exports[`test replacing a parent's child 1`] = `
Immutable.OrderedMap {
  "A": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "A",
    "text": "alpha",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "X",
  },
  "X": Immutable.Record {
    "parent": null,
    "characterList": Immutable.List [],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "X",
    "text": "",
    "type": "unstyled",
    "children": Immutable.List [
      "B",
      "D",
    ],
    "prevSibling": "A",
    "nextSibling": "C",
  },
  "B": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "B",
    "text": "beta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": null,
    "nextSibling": "D",
  },
  "C": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "C",
    "text": "charlie",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "X",
    "nextSibling": null,
  },
  "D": Immutable.Record {
    "parent": "X",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": null,
      },
    ],
    "data": Immutable.Map {},
    "depth": 0,
    "key": "D",
    "text": "delta",
    "type": "unstyled",
    "children": Immutable.List [],
    "prevSibling": "B",
    "nextSibling": null,
  },
}
`;
