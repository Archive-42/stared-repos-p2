//// Created by leananepari on 04/29/19. ////

// /**
//  * @param {number[][]} graph
//  * @param {number[]} initial
//  * @return {number}
//  */
const minMalwareSpread = (graph, initial) => {
  initial.sort();
  
  let store = {};
  
  const traverse = (row, initial1, initial2) => {
      for (let j = 0; j < row.length; j++) {
          if (j !== initial1 && j !== initial2 && row[j] === 1) {
              if (!store.hasOwnProperty(initial1)) {
                 store[initial1] = [j];
              } else {
                  if (!store[initial1].includes(j)) {
                      store[initial1].push(j);
                  } else {
                      continue
                  }
                  
              }

              traverse(graph[j], initial1, j);
          
          }
      }
  }
  
  for (let i = 0; i < initial.length; i++) {
    traverse(graph[initial[i]], initial[i], -1);
  }
  
  let max = 0;
  let maxNum;

  for (let key in store) {
      if (store[key].length > max) {
          max = store[key].length;
          maxNum = parseInt(key);
      } else if (store[key].length === max) {
          maxNum = Math.min(maxNum, key);
      }
  }
  if (maxNum === undefined) {
      return initial[0]
  }    
  return maxNum;
};