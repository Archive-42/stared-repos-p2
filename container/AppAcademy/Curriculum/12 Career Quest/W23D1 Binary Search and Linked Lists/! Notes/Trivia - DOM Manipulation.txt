DOM Manipulation Questions:

  - Is there any difference between Window and Document?
    - Yes.  The window is the first thing that gets loaded into the browser.  The window Object has the majority of properties on it, like: length, inner width, inner height, name, if it's been closed, etc.  The document is part of the window -- it is one of the properties(HTML, PHP, or any other document that needs to be loaded into the browser).  The document actually gets loaded into the Window Object and has properties (title, URL, cookie).  So this means that if you want to access a property for the window, it's window.property, and to access the document, you would access window.document.propert (or for short, document.property).
  
  - Do document.onload and window.onload fire at the same time?
    - No.  Window.onload by default is fired when the entire page loads, including content (images, CSS, Scripts, etc.).  Document.onload is called when the DOM is ready, which can be prior to images and other external content that needs to be loaded.  As an aside, some browsers window.onload has taken over the role of document.onload and actually does fire when the DOM is ready as well.

  - What are the different ways to get an element from the DOM?
    - getElementById
    - getElementByClassname
    - getElementsByTagname
    - querySelector
    - querySelectorAll

  - What are the different ways to select elements by using CSS selectors?
    - ID
    - Class
    - Tags
    - Sibling
    - Child
    - Descendant
    - * (universal CSS selector)
    - attributes
    - pseudo selectors (:hover, :last)
  
  - Can I use forEach or similar array methods on an HTMLCollection? How about a NodeList?
    - an HTML collection can only contain element nodes (<div>, <span>, <p>, etc.)
    - a NodeList collection can contain element nodes and other types of nodes.  In the DOM, everything is a node, and every node is an object.  The name is just a catchall.
    - We cannot over an HTML collection but we can over a Nodelist collection
      - querySelectorAll returns a NodeList
      - getElementsByTagname return an HTML collection
  
  - How can we implement getElementsByAttribute?
    - We can use the Document method, Document.All
    - Save that to a variable
    - cast it to an array
    - iterate over the array using a 'for' loop
    - use the .hasAttribute()
      - check to see, for example grab all the anchor tags, look for the attribute "href"
    - push all the nodes that do have that attribute into a result array
    - let b = document.all
      let result = []
      for (let node of b) {
        if (node.hasAttribute('href')) {
          result.push(node)
        }
      }
  
  - How can we add a class to an element by query selector?
    - var list = document.querySelectorAll('li')
      for (let i = 0; i < list.length; i++) {
        list[i].classList.add('classname')
      }

  - How can we verify whether one child is an element of another?
    - function isDescendant(parent, child) {
      let node = child.parentNode
      while (node !== null) {
        if (node === parent) {
          return true
        } else {
          node = node.parentNode
        }
      }
      return false
    }

  - What is the best way to create a DOM element?
    - Document.createElement('elementtype') //div, span, p, etc.

  - What is createDocumentFragment and why might you use it?
    - const list = ['foo', 'bar', 'baz'...], el, text
      for (let i = 0; i < list.length; i++) {
        el = document.createElement('li')
        text = document.createTextNode(list[i])
        el.appendChild(text)
        document.body.appendChild(el)
      }
    - Example create a list, iterate over the list, turn the strings into HTML elements, create some textNodes and append those textNodes onto the DOM element created, and then append the DOM element onto the document body
    - This causes reflows and repaints (very expensive)
    - One way we can avoid doing all of these repaints and reloads, but instead use the createDocumentFragment() and append all of these newly created DOM elements onto our documentFragment within our 'for' loop, and then at the very end, we'll append the whole thing onto the DOM which is just 1 repaint and 1 reflow

  - What is reflow? What causes reflow? How can we reduce reflow?
    - Reflow is similar to paint.  Reflow is the most critical process on frontend performance because it involves changes that affect the layout of a portion of a page or the whole page.  Reflow of an element causes a subsequent reflow of all child and ancestor elements as well as every following element on the DOM.  Essentially, we've moved an element around on the page, and now all other elements need to be repositioned to make room.
  
  - What is repaint and when does it occur?
    - Repaint occurs when changes are made to an element skin which changes its visibility but does not affect the layout.  An example is outlining an element, or changing the visibility to true/false, or changing background color

  - How could we make sure to run some JavaScript when the DOM is ready, i.e. $(docuemnt).ready?
    - Document.addEventListener('DOMContentLoaded', () => {callback function})

  - What is event bubbling?
    - When an event happens on an element, it's going to first run the handlers on it, then it's going to run on its parent, and up the ancestor chain all the way up to the window. 
    - It can also go in the opposite direction, called 'capturing.'  So clicking on the top element drills down into its descendants.  This is rarely used, but if you do want to use it, you have to pass a third argument set to addEventLister()
      - elem.addEventListener("click", e => alert(`Capturing: ${elem.tagName}`), true);
      - the True argument tells addEventListener to 'Capture'
  
  - What is the difference between event.target and event.currentTarget?
    - target is the element that triggered the event, the element the user clicked on
    - currentTarget is the element that the eventListener is attached to
  
  - How could we destroy multiple list items with one click handler?
    - leverage event bubbling
    - have only 1 event handler attached to the parent element
    - e.g. ul with 100 li items
    - grab the element, call parentNode, then removeChild (refers to itself)
    - document.getElementById('listToDestroy').addEventListener('click', function (e) {
        var elm = e.target.parentNode
        elm.parentNode.removeChild(elm)
        e.preventDefault()
      })
  
  - How can cwe capture all clicks in a page?
    - put a click handler on the window

  - How could you capture all the text in a web page?
    - Document.body.innerText

  
