for(var i=0;i<10;i++){
  setTimeout(function(){
      # console.log closes over what i is
      const that = i
      #console.log(i)
       console.log(that)
  })
}
console.log('a')  

// TODO: Type, what this code will print

# change the out put to print 0 - 9

# job q[]
#                    1               1               1
# work q[console.log(i), console.log(i), console.log(i)...]
# work q[console.log(that = 0), console.log(that = 1)...]
# stack [a]



var vs let 


for(let i=0;i<10;i++){
  setTimeout(function(){
       console.log(i)
  })
}
console.log('a')  

// TODO: Type, what this code will print

# Contact List

var data = [
   {
       name: 'James',
       email: 'james@gmail.com'   
   },
   {
       name: 'Jones',
       email: 'jones@gmail.com'   
   }, 
   {
       name: 'Donald',
       email: 'don@yahoo.com' 
   }
...
]


# local state holds data
# render each accessing name and email

updateState(e => user:{email} => {
    return this.data.user.email = email
})

let List = data.map(user => {
   return {
       <textbox>user.name</textbox>
       <textbox>user.email</textbox onKeyDown = (e=>updateState())>
   }
})

render {
   return
   <div>
       <List>
   </div>
}
// TODO: Show all contacts to the user on the page

Option 1: Print tree
there is a binary tree

           1

   2             3

4     5              6



var root ={
   value:1,
   left:{
       value:2,
       left:{value:4},
       right:{value:5}
   },
   right:{
       value:3,
       right:{value:6}
   }
}
Create a function to print tree from left to right

Example output: 4 2 5 1 3 6 

function printBSTDepthFirst(node) {
   #initiating stack DFS
   #initiaite stack with first node
   stack = [node]
   
   # while (stack.length) {
   #     let currNode stack.pop()
   #     if (currNode.left) stack.push(currNode.left)
   #     if (currNode.right) stack.push(currNode.right)
       
   #     console.log(currNode.val)
   
   # (1) => (2) => (4) console.logs 4 => 5 console.logs 5 => console.logs(2) => console.logs 1 =>  (3)
   if (node.left) printBSTDepthFirst(node.left)
   console.log(node.val)
   if (node.right) printBSTDepthFirst(node.right)
   }
}
#push it's children
#while loop push on children and do work
   # output value of the node


