What are employers looking for?
  - Passing a technical interview is about knowing the r ight stuff and communicating that you know interview
  - Ability to work for a difficult problem and utilize different tools
  - Good design decision making - clean readable maintainable code
  - Familiarity with a variety of basics that all software developers should know
  - Good communication skills and fit with team members

The Application pipeline
  - Phone Screen (20 - 45 minutes)
  - Coding challenge or project (2 - 8 hours)
  - Technical phone or video screen (45 - 60 minutes)
  - Onsite (3 - 6 hours)

General advice for phone screens
  - Don't rush
  - It's essential that you have a pad and pen to work through problems and take notes with
  - If it's technical, have something to write on - "Writing things down helps me keep track of my thoughts, would it be cool if I jotted things along the way as I explain?"
  - If it's behavioral, have your PAR/SAR (Problem / Situation - Action - Result) Chart in front of you
  - Also have your resume and project githubs open for reference as well

General advice for coding challenges
  - Pay attention to your code style - don't extend past 80 characters
  - Efficiency and modularity
    - Use classes where appropriat
    - Helper functions are your friend
    - Each function should do one things - same for classes and files
  - Good documentation
    - Great code should read just like english
    - If there's some part of your implementation that is difficult to read, ask yourself can this be abstracted into a cleverly named helper function
    - Be sure to document your object
  - Write tests!
    - If there's time

General advice for Onsites
  - Ask clarifying questions
    - test inputs and outputs and edge cases
    - the MOST IMPORTANT to clarify
    - come up with a couple of approaches
      - start with a naive approach
      - hopefully you'll come up with an optimized approach
      - After you've gotten a few approaches worked out
  - Communicate your approach
  - Communicate throghout
  - Write examples
  - Clean coding style and presentation
  - Be mindful of time and space complexity
  - Provide alternatives
    - Efficiency
    - modularity
  - Be persistent - NEVER GIVE UP