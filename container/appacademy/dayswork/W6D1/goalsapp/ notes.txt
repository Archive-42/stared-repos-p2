tests
    gemfile
        group :development, :test do
            gem 'rspec-rails'
            gem 'factory_bot_rails'
            gem 'rails-controller-testing'
        end
        group :test do
            gem 'faker'
            gem 'capybara'
            gem 'guard-rspec'
            gem 'launchy'
            gem 'shoulda-matchers
        end
    bundle i
    rails db:create
    rails g rspec:install
    .rspec
        --color
        --require spec_helper
        --format documentation
    config/application.rb
        config.generators do |g|
            g.test_framework :rspec,
                :fixtures => false,
                :view_specs => false,
                :helper_specs => false,
                :routing_specs => false,
                :controller_specs => true,
                :request_specs => false
        end
    rails_helper.rb
        require 'shoulda/matchers'
        Shoulda::Matchers.configure do |config|
            config.integrate do |with|
                with.test_framework :rspec
                with.library :rails
            end
        end
        RSpec.configure do |config|
            config.include FactoryBot::Syntax::Methods
        end
    model factory
        my_app/spec/factories.rb

        my_app/spec/factories/cats.rb
        FactoryBot.define do
            factory :cat do 
                name { Faker::Name.name }
                color 'Dark Brown'
                email 'meow@meow.com'
                owner_id 1
                active true
                temperament 'mild'
                sequence :hat do |n|
                    FactoryBot.build(:hat, hat_name: "top-hat #{n}")
                end
            end
        end
        cat = FactoryBot.build(:cat)
        evil_cat = FactoryBot.build(:cat, temperament: 'malicious')
    model tests
        validation tests
            it { should validate_presence_of(:name) }
            it { should validate_uniqueness_of(:name) }
            it { should ensure_inclusion_of(:name).in_array(['Cavaliers', 'Suns', 'Mavericks'])} 
        associations tests
            it { should have_many(:basketball_players)}
            it { should have_one(:owner)}
        error message tests
            no_name_team.valid?
            expect(no_name_team.errors[:name]).to include('can\'t be blank')
        scopes
            expect(BasketballTeam.playoff_teams.where_values_hash).to eq({'playoffs' => true})
    controller tests
        get :new, link: {}
        post :create, params: { link: { title: 'this is an invalid link' } }
        expect(response).to render_template('new')
        expect(response).to redirect_to(link_url(Link.last))
        expect(response).to have_http_status(200
        expect(flash[:errors]).to be_present
    integration tests
        spec/features
            require 'rails_helper'
            feature 'the signup process' do
                scenario 'has a new user page' do
                    visit new_user_url
                    visit(post_comments_path(post))
                    fill_in 'username', with: 'testing_username'
                    choose('A Radio Button')
                    check('A Checkbox')
                    uncheck('A Checkbox')
                    attach_file('Image', '/path/to/image.jpg')
                    select('Option', from: 'Select Box')
                    click_on 'Create User'
                    save_and_open_page
                    expect(page).to have_content 'New user'